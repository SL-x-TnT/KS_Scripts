# Server Script runs only on Hosted server & not in test mode
# KrunkScript Copyright (C) Yendis Entertainment Pty Ltd
# 

# Role flags. Uses 1 bit each to allow different consoleMenu_roles to use different commands
obj consoleMenu_roles = {               
	host: { name: "Host", value: 1, hasMenu: true },
	mod: { name: "Mod", value: 1 << 2, hasMenu: true },
	user: { name: "User", value: 1 << 3 },
	none: { name: "", value: 1 << 30 } # Shifting 31 bits makes it negative. Can get around this with "(1 << 31) >>> 0" if needed
};

obj consoleMenu_config = {
	playerRoles: obj[			# List of player names + role. Uses account name. When data storage is implemented, these can be pulled from a database
		{ name: "SLxTnT", role: consoleMenu_roles.host }
	],
    commands: obj[ 				# List of commands. Has styling for client and added right to left. New commands need to be added to consoleMenu_executeCommand and "Commands" section
		# TP/Location commands
		{ 
			name: "tpTo", 
			minRole: consoleMenu_roles.mod,
			help: "tpTo [name|sid] {targetName|targetSid}",
			description: "Teleports player to another. If no name/sid is supplied, will teleport you to target."
		}, 
		{ 
			name: "tpLocation", 
			minRole: consoleMenu_roles.mod,
			help: "tpLocation [targetPlayer|targetSid] x y z",
			description: "Teleports player to coordinates. If no targetPlayer supplied, will teleport you to location"
		}, 
		{ 
			name: "location", 
			minRole: consoleMenu_roles.mod,
			help: "location [name|sid]",
			description: "Gets location of self or target player."
		},
		
		# Admin commands
		{
			name: "addRole", 
			minRole: consoleMenu_roles.host,
			help: "addRole {name|sid} roleName",
			description: "Adds the target player to the role."
		},
		{
			name: "removeRole", 
			minRole: consoleMenu_roles.host,
			help: "removeRole {name|sid} {host|mod}",
			description: "Removes the target player from the role."
		},
		{ 
			name: "kick", 
			minRole: consoleMenu_roles.mod, 
			help: "kick {name|sid}",
			description: "Kick players from server."
		},
		{
			name: "ban", 
			minRole: consoleMenu_roles.mod, 
			help: "ban {name|sid}",
			description: "Bans player from server."
		},
		{
			name: "playerRoles", 
			minRole: consoleMenu_roles.mod, 
			help: "playerRoles",
			description: "Returns a list of all players with a role."
		},
		
		# General commands
		{
			name: "sid", 
			minRole: consoleMenu_roles.none,
			help: "sid name",
			description: "Returns sid of player by name.",
		},
		{
			name: "players", 
			minRole: consoleMenu_roles.none,
			help: "players",
			description: "Displays list of players with sid."
		},
		{
			name: "help", 
			help: "help",
			description: "Displays this menu.",
			minRole: consoleMenu_roles.none
		}
	]
};

# Verifies that the player is allowed to target other player based on roles
bool action consoleMenu_canTarget(obj player, obj target) {
	return (num)player.roleInfo.value < (num)target.roleInfo.value;
}

# Finds the player based on sid or partial name search
obj action consoleMenu_findPlayer(str search) {
	obj[] players = GAME.PLAYERS.list();
	num sid = toNum search;
	
	# It's an sid
	if(sid > 0) {
		for(num i = 0; i < lengthOf players; i++) {
			if((num)players[i].sid == sid) {
				return players[i];
			}
		}
	}
	else {
		obj possiblePlayer = {};
		search = UTILS.toLower(search);
		bool canBePartial = true;

		for(num i = 0; i < lengthOf players; i++) {
			str name = UTILS.toLower(players[i].username);
			
			if(name == search) {
				return players[i];
			}
			else if (canBePartial && UTILS.truncateTxt(name, lengthOf search, true) == search) { # Partial name search (starts with)
				if(notEmpty possiblePlayer) {
					canBePartial = false;
				}
				else {
					possiblePlayer = players[i];
				}
			}
		}

		if(notEmpty possiblePlayer && canBePartial) {
			return possiblePlayer;
		}
	}

	return {};
}

# Sends a response for the command
action consoleMenu_sendResponse(obj player, str text, str consoleText, str error) {
	GAME.NETWORK.send("commandResponse", {text: text, consoleText: consoleText, error: error }, (str)player.id);
}

# Commands

action consoleMenu_banPlayer(obj command) {
	if(lengthOf command.parameters != 0) {
		consoleMenu_sendResponse((obj)command.player, "", "", "Invalid parameter count. Expecting 1 got 0");
	
		return;
	}

	obj player = consoleMenu_findPlayer((str)command.parameters[0]);

	if(!(notEmpty player)) {
		consoleMenu_sendResponse((obj)command.player, "", "", "Failed to find player: " + (str)command.parameters[0]);

		return;
	}

	if((num)player.sid == (num)command.player.sid) {
		consoleMenu_sendResponse((obj)command.player, "", "", "You can not ban yourself");

		return;
	}

	if(!consoleMenu_canTarget((obj)command.player, player)) {
		consoleMenu_sendResponse((obj)command.player, "", "", "You can not ban " + (str)command.parameters[0]);

		return;
	}

	GAME.ADMIN.ban(player.id);
	
	consoleMenu_sendResponse((obj)command.player, "Player: " + (str)player.username + " banned", "", "");
}

action consoleMenu_kickPlayer(obj command) {
	if(lengthOf command.parameters == 0) {
		consoleMenu_sendResponse((obj)command.player, "", "", "Invalid parameter count. Expecting 1 got 0");
	
		return;
	}

	obj player = consoleMenu_findPlayer((str)command.parameters[0]);

	if(!(notEmpty player)) {
		consoleMenu_sendResponse((obj)command.player, "", "", "Failed to find player: " + (str)command.parameters[0]);

		return;
	}

	if((num)player.sid == (num)command.player.sid) {
		consoleMenu_sendResponse((obj)command.player, "", "", "You can not kick yourself");

		return;
	}

	if(!consoleMenu_canTarget((obj)command.player, player)) {
		consoleMenu_sendResponse((obj)command.player, "", "", "You can not kick " + (str)command.parameters[0]);

		return;
	}

	GAME.ADMIN.kick(player.id);

	consoleMenu_sendResponse((obj)command.player, "Player: " + (str)player.username + " kicked", "", "");
}

action consoleMenu_tpPlayer(obj command) {

	num paramLength = lengthOf command.parameters;
	
	# Teleporting to a player
	if((str)command.name == "tpTo") {
		if(paramLength < 1 || paramLength > 2) {
			consoleMenu_sendResponse((obj)command.player, "", "", "Invalid parameter count. Expecting 1 or 2 got " + toStr lengthOf command.parameters);
		
			return;
		}
	
		obj player = (obj)command.player;
		obj targetPlayer = consoleMenu_findPlayer((str)command.parameters[0]);
		
		if(paramLength == 2) {
			player = targetPlayer;
			targetPlayer = consoleMenu_findPlayer((str)command.parameters[1]);
		}
		
		if(!(notEmpty targetPlayer)) {
			consoleMenu_sendResponse((obj)command.player, "", "", "Failed to find player: " + (str)command.parameters[0]);

			return;
		}

		player.position.x = targetPlayer.position.x;
		player.position.y = targetPlayer.position.y;
		player.position.z = targetPlayer.position.z;
		player.velocity.x = 0;
		player.velocity.y = 0;
		player.velocity.z = 0;
		
		consoleMenu_sendResponse((obj)command.player, "Teleporting " + (str)player.username + " to " + (str)targetPlayer.username, "", "");
	}
	else if ((str)command.name == "tpLocation") {
		if(paramLength < 3 || paramLength > 4) {
			consoleMenu_sendResponse((obj)command.player, "", "", "Invalid parameter count. Expecting 3 or 4 got " + toStr lengthOf command.parameters);
		
			return;
		}
		
		obj player = (obj)command.player;
		num index = 0;

		if(paramLength == 4) {
			player = consoleMenu_findPlayer((str)command.parameters[0]);
			index = 1;
		}

		# Assuming they were all numbers. If not, it'll be 0
		command.player.position.x = toNum command.parameters[0 + index];
		command.player.position.y = toNum command.parameters[1 + index];
		command.player.position.z = toNum command.parameters[2 + index];

		command.player.velocity.x = 0;
		command.player.velocity.y = 0;
		command.player.velocity.z = 0;

		consoleMenu_sendResponse((obj)command.player, "Teleporting " + (str)player.username + " to location", "", "");
	}
	
}

action consoleMenu_help(obj command) {
	str text = "";
	
	for(num i = 0; i < lengthOf consoleMenu_config.commands; i++) {
		obj commandInfo = (obj)consoleMenu_config.commands[i];
		
		if((num)command.player.roleInfo.value <= (num)commandInfo.minRole.value) {
			text += "\n" + toStr commandInfo.help;
			text += "\n\t" + toStr commandInfo.description + "\n";
		}
	}
	
	consoleMenu_sendResponse((obj)command.player, "Check console for help info (F12)", text, "");
}

action consoleMenu_location(obj command) {
	# Personal location
	if(lengthOf command.parameters == 0) {
		str response = (str)command.player.username + " x: " + toStr command.player.position.x + ", y: " + toStr command.player.position.y + ", z: " + toStr command.player.position.z;
		
		consoleMenu_sendResponse((obj)command.player, response, "", "");
	}
	else {
		obj player = consoleMenu_findPlayer((str)command.parameters[0]);

		if(notEmpty player) {
			str response = (str)player.username + " x: " + toStr player.position.x + ", y: " + toStr player.position.y + ", z: " + toStr player.position.z;
		
			consoleMenu_sendResponse((obj)command.player, response, "", "");
		}
		else {
			consoleMenu_sendResponse((obj)command.player, "", "", "Failed to find player: " + (str)command.parameters[0]);
		}
	}
}

action consoleMenu_getSid(obj command) {
	if(lengthOf command.parameters == 0) {
		consoleMenu_sendResponse((obj)command.player, "", "", "Invalid parameter count. Expecting 1 got 0");
	
		return;
	}

	obj player = consoleMenu_findPlayer((str)command.parameters[0]);

	if(!(notEmpty player)) {
		consoleMenu_sendResponse((obj)command.player, "", "", "Failed to find player: " + (str)command.parameters[0]);

		return;
	}

	consoleMenu_sendResponse((obj)command.player, (str)player.username + ": " + toStr player.sid, "", "");
}

action consoleMenu_listPlayers(obj command) {
	str text = "\n";
	
	obj[] players = GAME.PLAYERS.list();

	for(num i = 0; i < lengthOf players; i++) {
		obj player = players[i];
		
		text += "[" + toStr player.sid + "] " + (str)player.username;
		
		if((num)player.roleInfo.value < (num)consoleMenu_roles.none.value) {
			text += " [" + (str)player.roleInfo.name + "]";
		}
		
		if((str)player.username != (str)player.accountName) {
			text += " (" + (str)player.accountName + ")";
		}
	}

	consoleMenu_sendResponse((obj)command.player, "Check console for player list (F12)", text, "");
}

action consoleMenu_listPlayerRoles(obj command) {
	str text = "";
	
	for(num i = 0; i < lengthOf consoleMenu_config.playerRoles; i++) {
		obj playerRole = (obj)consoleMenu_config.playerRoles[i];
		
		text += "\n" + (str)playerRole.name + " - " + (str)playerRole.role.name;
	}
	
	consoleMenu_sendResponse((obj)command.player, "Check console for player list (F12)", text, "");
}

action consoleMenu_executeCommand(obj command) {
	
	# Add new commands here
	if((str)command.name == "tpTo" || (str)command.name == "tpLocation") {
		consoleMenu_tpPlayer(command);
	}
	else if((str)command.name == "kick") {
		consoleMenu_kickPlayer(command);
	}
	else if((str)command.name == "ban") {
		consoleMenu_banPlayer(command);
	}
	else if ((str)command.name == "location") {
		consoleMenu_location(command);
	}
	else if ((str)command.name == "help") {
		consoleMenu_help(command);
	}
	else if ((str)command.name == "players") {
		consoleMenu_listPlayers(command);
	}
	else if((str)command.name == "playerRoles") {
		consoleMenu_listPlayerRoles(command);	
	}
	else if((str)command.name == "sid") {
		consoleMenu_getSid(command);	
	}
	else {
			consoleMenu_sendResponse((obj)command.player, "", "", "Command \'" + (str)command.name + "\' not implemented yet");
	}
}

# End Commands

obj action consoleMenu_getRole(str accountName) {
	accountName = UTILS.toLower(accountName);

	for(num i = 0; i < lengthOf consoleMenu_config.playerRoles; i++) {
		if(UTILS.toLower(consoleMenu_config.playerRoles[i].name) == accountName) {
			return (obj) consoleMenu_config.playerRoles[i].role;
		}
	}
	
	return (obj)consoleMenu_roles.none;
}
 
bool action consoleMenu_canUseCommand(obj command, obj player) {
	if((toNum command.minRole.value > 0 && (num)player.roleInfo.value <= (num)command.minRole.value) || 										# minRole is set AND player role is better or equal to command role min
			toNum command.requiredRole > 0 && ((num)command.requiredRole & (num)player.role) == (num)player.role) { 	# requiredRole is set AND bit flag for player role is set
			return true;
		}
	
	return false;
}

obj action consoleMenu_getCommand(obj commandData) {
	for(num i = 0; i < lengthOf consoleMenu_config.commands; i++) {
		if(UTILS.toLower(consoleMenu_config.commands[i].name) == UTILS.toLower(commandData.name)) {
			return (obj)consoleMenu_config.commands[i];
		}
	}
	
	return {};
}

obj action consoleMenu_parseCommand(str commandStr) {
	str[] parts = str[];
	
	str temp = "";
	
	for(num i = 0; i < lengthOf commandStr; i++) {
		if(commandStr[i] == " " && temp != "") {
			addTo parts temp;
			temp = "";
			
			continue;
		}
		
		temp += commandStr[i];
	}
	
	if(lengthOf temp > 0) {
		addTo parts temp;
	}
	
	if(lengthOf parts == 0) {
		return {};
	}
	
	str commandName = parts[0];
	
	remove parts[0];
	
	return {
		name: commandName,
		parameters: parts
	};
}

action consoleMenu_handlePlayerSpawn(str id) {
	obj player = GAME.PLAYERS.findByID(id);

	if(!player.role) {
		player.roleInfo = consoleMenu_getRole((str)player.accountName);
		player.role = player.roleInfo.value;	# Too lazy to change .role to an object

		if(!!player.roleInfo.hasMenu) {
			GAME.NETWORK.send("consoleMenu", { enabled: true }, id);
			GAME.CHAT.send(id, "Console menu enabled. Press ` to open", "#00ff00");
		}
	}
}

action consoleMenu_handleNetworkMessage(str id, obj data, str playerID) {
	obj player = GAME.PLAYERS.findByID(playerID);

	if(id == "executeCommand") {
		obj parsedCommand = consoleMenu_parseCommand((str)data.command);
		obj commandInfo = consoleMenu_getCommand(parsedCommand);
		parsedCommand.commandInfo = commandInfo;
		parsedCommand.player = player;

		# Valid command
		if(notEmpty commandInfo && consoleMenu_canUseCommand((obj)parsedCommand.commandInfo, player)) {
			consoleMenu_executeCommand(parsedCommand);
		}
		else {
			consoleMenu_sendResponse(player, "", "", "Invalid command: " + (str)parsedCommand.name);
		}
	}
	else if (id == "menuChange") {
		player.defaultMovement = !data.visible;
		player.disableShooting = data.visible;
	}
}

# Game Hooks

public action onPlayerSpawn(str id) {
	consoleMenu_handlePlayerSpawn(id);
}

public action onNetworkMessage(str id, obj data, str playerID) {
	consoleMenu_handleNetworkMessage(id, data, playerID);
}
