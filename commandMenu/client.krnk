# Client Script runs only on the client
# KrunkScript Copyright (C) Yendis Entertainment Pty Ltd
# 

obj config = {
	menuKey: "o",           # Key used to open menu
	buttons: obj[],
	ui: {              		# Styling used for UI
		menu: {
			paddingPx: 5,
			
			width: 25, 		
			widthIsPercent: true,
			height: 30,  	
			heightIsPercent: true,
			
			backgroundColor: "#333333",
            opacity: 1,
        	textColor: "#ffffff",
			position: { 	# Uses widthIsPercent/heightIsPercent to determine whether or not these are a % per px
				top: 50, 
				left: 50
			},
			additional: "border-radius:5px;"
		},
		header: {
			text: "Player List",
			width: 100, 		
			widthIsPercent: true,
			height: 10, 	
			heightIsPercent: true,
			
        	textColor: "#ffffff",
		},
		row: {
			width: 98, 		
			widthIsPercent: true,
			
			height: 25, 	
			heightIsPercent: false,
			
            opacity: 1,
        	textColor: "#ffffff",
        	rowOddColor: "#5d5d5d",
        	rowEvenColor: "#838383",
			additional: "margin: 0 auto;padding:0.5% 0%;"
		},
		button: {
			width:8,
			widthIsPercent: true,
			height: 95, 	
			heightIsPercent: true,
			opacity: 1,
			textColor: "#dddddd",
			additional: "display:flex;float:right;font-size:8px;align-items:center;justify-content:center;margin:0px 5px 0px;border-radius:5px;border: 1px solid #333333"
		},
		playerText: {
			width: 48,
			widthIsPercent: true,
			height: 100,
			heightIsPercent: true,
			
			textColor: "#ffffff",
			additional: "text-align:left;float:left;margin-left:2%"
		}
    },    
    commandDivId: "commandDiv"
};

obj menuState = {
    enabled: false,
	created: false,
    players: obj[] # Can likely remove
};

str action sizeUnit(bool isPercent) {
	return isPercent ? "%" : "px";
}

str action createStyle(obj style) {
	
	str cssStyle = "";
	
	# Margin
	if(toNum style.marginPx > 0) {
		cssStyle += "margin:" + toStr style.marginPx + "px;";
	}
	# Padding
	if(toNum style.paddingPx > 0) {
		cssStyle += "padding:" + toStr style.paddingPx + "px;";
	}
	
    # Width/Height
    cssStyle += "width:" + (str)style.width + sizeUnit((bool)style.widthIsPercent) + ";height:" + (str)style.height + sizeUnit((bool)style.heightIsPercent) + ";";

    # Background color + opacity
	if(!!style.backgroundColor) {
    	cssStyle += "background-color:" + (str)style.backgroundColor + ";opacity:" + (str)style.opacity + ";";
	}

	# Text color
	if(!!style.textColor) {
		cssStyle += "color:" + (str)style.textColor + ";";	
	}

    # Position, if defined
    if(notEmpty (obj)style.position) {
        # Center based on width/height
        num top = (num)style.position.top - (num)style.height / 2;
        num left = (num)style.position.left - (num)style.width / 2;

        cssStyle += "position:fixed;top:" + toStr top + sizeUnit((bool)style.heightIsPercent) + ";" + "left:" + toStr left + sizeUnit((bool)style.widthIsPercent) + ";";
    }

    if(!!style.additional) {
        cssStyle += (str)style.additional;
    }

    return cssStyle;
}

action generateMenu() {
    menuState.players = GAME.PLAYERS.list();
	menuState.created = true;

    GAME.UI.addDIV((str)config.commandDivId, true, createStyle((obj)config.ui.menu));

	# Create header
	str headerDiv = GAME.UI.addDIV("commandHeader", true, createStyle((obj)config.ui.header), (str)config.commandDivId);
	GAME.UI.updateDIVText(headerDiv, config.ui.header.text);

	# Create body container
	str bodyDiv = GAME.UI.addDIV("commandBody", true, "width:100%;height:" + toStr(100 - (num)config.ui.header.height) +"%;overflow-y:auto;", (str)config.commandDivId);

	# Create rows
	for(num i = 0; i < lengthOf menuState.players; i++) {
		obj player = (obj)menuState.players[i];
		
		#num sid = (num)menuState.players[i].sid;
		num sid = i;
		
		str idPostfix = "_" + toStr sid + "_" + (str)player.username;
		
		# Create row
		config.ui.row.backgroundColor = (i + 1) % 2 == 0 ? (str)config.ui.row.rowEvenColor : (str)config.ui.row.rowOddColor; # Alternates background color where first row is odd
		
    	str rowId = GAME.UI.addDIV("playerRow_" + toStr sid, true, createStyle((obj)config.ui.row), bodyDiv);
	
		# Create username text
    	str textId = GAME.UI.addDIV("playerText_" + toStr sid, true, createStyle((obj)config.ui.playerText), rowId);
		GAME.UI.updateDIVText(textId, menuState.players[i].username);

		# Create buttons
		for(num z = 0; z < lengthOf config.buttons; z++) {
			obj button = (obj)config.buttons[z];

			# Skip any commands that can't be executed on yourself
			if(!button.executeOnSelf && (bool)player.isYou) {
				continue;
			}

			if((bool)button.isSeparator) {
				if((num)button.width > 0) {
					GAME.UI.addDIV("seperator_" + toStr z + idPostfix, true, "width:" + toStr button.width + "%;height:100%;float:right", rowId);
			}

			continue;
		}

		config.ui.button.backgroundColor = button.color;

		GAME.UI.updateDIVText(
		GAME.UI.addDIV((str)button.name + idPostfix, true, createStyle((obj)config.ui.button), rowId), 
		button.name);

		}
	}
}

action showMenu() {
    if(!menuState.enabled) {
        return;
    }

    GAME.INPUTS.unlockMouse();

    generateMenu();
}

action hideMenu() {
    GAME.UI.removeDIV((str)config.commandDivId);
	menuState.created = false;
}

obj action parseDivId(str id) {
	#name_sid_username
	
	obj parsedDiv = {
		method: "",
		sid: 0,
		username: ""
	};
	
	str[] split = str[];
	str temp = "";
	
	for(num i = 0; i < lengthOf id; i++) {
		if((str)id[i] == "_") {
			addTo split temp;
			temp = "";
			
			continue;
		}
		
		temp += id[i];
	}
	
	if(lengthOf temp > 0) {
		addTo split temp;
	}
	
	if(lengthOf split == 3) {
		parsedDiv.method = split[0];
		parsedDiv.sid = toNum split[1];
		parsedDiv.username = split[2];
	}
	
	
	return parsedDiv;
}

action handleKeyPress(str key) {
    if((str)config.menuKey == key) {
        if(!menuState.visible) {
            showMenu();
        }
    }
}

action handleDivClicked(str id) {
	obj parsedDiv = parseDivId(id);

	for(num i = 0; i < lengthOf config.buttons; i++) {
		if((bool)config.buttons[i].isSeparator) {
			continue;
		}
		
		if((str)config.buttons[i].name == (str)parsedDiv.method) {
			
			# Send network message
			GAME.NETWORK.send("executeCommand", parsedDiv);
		
			return;
		}
	}
}

action handleNetworkMessage(str id, obj data) {
    # Server enables menu
    if(id == "commandMenu") {
        menuState.enabled = true;
		
		for(num i = 0; i < lengthOf data.buttons; i++) {
			addTo config.buttons data.buttons[i];
		}
    }
}

# Might be another way to detect when clicking off the menu
action handleMouseClick() {
	if((bool)menuState.created) {
        hideMenu();
	}
}

# Game Hooks

public action onKeyPress(str key, num code) {
    handleKeyPress(key);
}

public action onDIVClicked(str id) {
    handleDivClicked(id);
}

public action onNetworkMessage(str id, obj data) {
    handleNetworkMessage(id, data);
}

public action onMouseClick(num button, num x, num y) {
    handleMouseClick();
}
